; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=536 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.ADC_FunctionTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  ADC_FunctionTest PROC
;;;32     
;;;33     void ADC_FunctionTest()
000000  4d1f              LDR      r5,|L1.128|
;;;34     {
;;;35     	int32_t  i32ConversionData,i32ConversionData2;
;;;36     	ADC_POWER_ON(ADC);
000002  6828              LDR      r0,[r5,#0]
000004  2701              MOVS     r7,#1
000006  4338              ORRS     r0,r0,r7
000008  6028              STR      r0,[r5,#0]
;;;37      while(1)
;;;38     	{
;;;39     		ADC_Open(ADC, ADC_ADCR_DIFFEN_SINGLE_END, ADC_ADCR_ADMD_SINGLE_CYCLE, BIT0);
00000a  4e1d              LDR      r6,|L1.128|
00000c  3e80              SUBS     r6,r6,#0x80
                  |L1.14|
00000e  2301              MOVS     r3,#1
000010  2208              MOVS     r2,#8
000012  2100              MOVS     r1,#0
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       ADC_Open
;;;40        ADC_Open(ADC, ADC_ADCR_DIFFEN_SINGLE_END, ADC_ADCR_ADMD_SINGLE_CYCLE, BIT1);
00001a  2302              MOVS     r3,#2
00001c  2208              MOVS     r2,#8
00001e  2100              MOVS     r1,#0
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       ADC_Open
;;;41     		ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);
000026  612f              STR      r7,[r5,#0x10]
;;;42     
;;;43     		ADC_ENABLE_INT(ADC, ADC_ADF_INT);
000028  2101              MOVS     r1,#1
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       ADC_EnableInt
000030  2001              MOVS     r0,#1
000032  4914              LDR      r1,|L1.132|
000034  0740              LSLS     r0,r0,#29
000036  6008              STR      r0,[r1,#0]
;;;44     		NVIC_EnableIRQ(ADC_IRQn);
;;;45     
;;;46     		g_u32AdcIntFlag = 0;
000038  4813              LDR      r0,|L1.136|
00003a  2100              MOVS     r1,#0
00003c  6001              STR      r1,[r0,#0]  ; g_u32AdcIntFlag
;;;47     		ADC_START_CONV(ADC);
00003e  6829              LDR      r1,[r5,#0]
000040  2201              MOVS     r2,#1
000042  02d2              LSLS     r2,r2,#11
000044  4311              ORRS     r1,r1,r2
000046  6029              STR      r1,[r5,#0]
                  |L1.72|
;;;48     
;;;49     		while(g_u32AdcIntFlag == 0);
000048  6801              LDR      r1,[r0,#0]  ; g_u32AdcIntFlag
00004a  2900              CMP      r1,#0
00004c  d0fc              BEQ      |L1.72|
;;;50     
;;;51     		ADC_DISABLE_INT(ADC, ADC_ADF_INT);
00004e  2101              MOVS     r1,#1
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       ADC_DisableInt
;;;52     
;;;53     		i32ConversionData = ADC_GET_CONVERSION_DATA(ADC, 0);
000056  6830              LDR      r0,[r6,#0]
000058  b282              UXTH     r2,r0
;;;54     	  i32ConversionData2 = ADC_GET_CONVERSION_DATA(ADC, 1);
00005a  6870              LDR      r0,[r6,#4]
;;;55     		printf("Conversion result of channel %d: 0x%X (%d)\n", 0, i32ConversionData, i32ConversionData);
00005c  4613              MOV      r3,r2
00005e  b284              UXTH     r4,r0                 ;54
000060  2100              MOVS     r1,#0
000062  a00a              ADR      r0,|L1.140|
000064  f7fffffe          BL       __2printf
;;;56     		printf("Conversion result of channel %d: 0x%X (%d)\n", 1, i32ConversionData2, i32ConversionData2);
000068  4623              MOV      r3,r4
00006a  461a              MOV      r2,r3
00006c  2101              MOVS     r1,#1
00006e  a007              ADR      r0,|L1.140|
000070  f7fffffe          BL       __2printf
;;;57     		TIMER_Delay(TIMER0, 1000000);
000074  4910              LDR      r1,|L1.184|
000076  4811              LDR      r0,|L1.188|
000078  f7fffffe          BL       TIMER_Delay
00007c  e7c7              B        |L1.14|
;;;58     	}
;;;59     }
;;;60     
                          ENDP

00007e  0000              DCW      0x0000
                  |L1.128|
                          DCD      0x40043080
                  |L1.132|
                          DCD      0xe000e100
                  |L1.136|
                          DCD      ||.data||
                  |L1.140|
00008c  436f6e76          DCB      "Conversion result of channel %d: 0x%X (%d)\n",0
000090  65727369
000094  6f6e2072
000098  6573756c
00009c  74206f66
0000a0  20636861
0000a4  6e6e656c
0000a8  2025643a
0000ac  20307825
0000b0  58202825
0000b4  64290a00
                  |L1.184|
                          DCD      0x000f4240
                  |L1.188|
                          DCD      0x40050000

                          AREA ||i.ADC_IRQHandler||, CODE, READONLY, ALIGN=2

                  ADC_IRQHandler PROC
;;;60     
;;;61     void ADC_IRQHandler(void)
000000  4902              LDR      r1,|L2.12|
;;;62     {
;;;63     	g_u32AdcIntFlag = 1;
000002  2001              MOVS     r0,#1
000004  6008              STR      r0,[r1,#0]  ; g_u32AdcIntFlag
;;;64     	ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);
000006  4902              LDR      r1,|L2.16|
000008  6108              STR      r0,[r1,#0x10]
;;;65     }
00000a  4770              BX       lr
;;;66     
                          ENDP

                  |L2.12|
                          DCD      ||.data||
                  |L2.16|
                          DCD      0x40043080

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;5      
;;;6      void SYS_Init(void)
000000  b5f8              PUSH     {r3-r7,lr}
000002  2059              MOVS     r0,#0x59
000004  4c24              LDR      r4,|L3.152|
000006  2116              MOVS     r1,#0x16
000008  2288              MOVS     r2,#0x88
                  |L3.10|
00000a  6020              STR      r0,[r4,#0]
00000c  6021              STR      r1,[r4,#0]
00000e  6022              STR      r2,[r4,#0]
000010  6823              LDR      r3,[r4,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L3.10|
;;;7      {
;;;8      	SYS_UnlockReg();
;;;9      
;;;10     	CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;11     	CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;12     	CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;13     	CLK->PCLKDIV = (CLK_PCLKDIV_APB0DIV_DIV2 | CLK_PCLKDIV_APB1DIV_DIV2);
00002a  491c              LDR      r1,|L3.156|
00002c  2011              MOVS     r0,#0x11
00002e  6348              STR      r0,[r1,#0x34]
;;;14     
;;;15     	CLK_EnableModuleClock(ADC_MODULE);
000030  4d1b              LDR      r5,|L3.160|
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       CLK_EnableModuleClock
;;;16     	CLK_EnableModuleClock(TMR0_MODULE);
000038  4e1a              LDR      r6,|L3.164|
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       CLK_EnableModuleClock
;;;17     	CLK_EnableModuleClock(UART0_MODULE);
000040  4f19              LDR      r7,|L3.168|
000042  4638              MOV      r0,r7
000044  f7fffffe          BL       CLK_EnableModuleClock
;;;18     
;;;19     	CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL2_ADCSEL_PCLK1, CLK_CLKDIV0_ADC(1));
000048  2200              MOVS     r2,#0
00004a  0531              LSLS     r1,r6,#20
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       CLK_SetModuleClock
;;;20     	CLK_SetModuleClock(TMR0_MODULE, CLK_CLKSEL1_TMR0SEL_HIRC, MODULE_NoMsk);
000052  2107              MOVS     r1,#7
000054  2200              MOVS     r2,#0
000056  0209              LSLS     r1,r1,#8
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       CLK_SetModuleClock
;;;21     	CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_HIRC, CLK_CLKDIV0_UART0(1));
00005e  2103              MOVS     r1,#3
000060  2200              MOVS     r2,#0
000062  0609              LSLS     r1,r1,#24
000064  4638              MOV      r0,r7
000066  f7fffffe          BL       CLK_SetModuleClock
;;;22     
;;;23     	SystemCoreClockUpdate();
00006a  f7fffffe          BL       SystemCoreClockUpdate
;;;24     
;;;25     	SYS->GPB_MFPL = SYS_GPB_MFPL_PB0MFP_ADC0_CH0;
00006e  2101              MOVS     r1,#1
000070  0788              LSLS     r0,r1,#30
000072  6381              STR      r1,[r0,#0x38]
;;;26     	SYS->GPB_MFPL = SYS_GPB_MFPL_PB1MFP_ADC0_CH1;
000074  2110              MOVS     r1,#0x10
000076  6381              STR      r1,[r0,#0x38]
;;;27     	SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk)) |(SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
000078  6bc1              LDR      r1,[r0,#0x3c]
00007a  22ff              MOVS     r2,#0xff
00007c  0412              LSLS     r2,r2,#16
00007e  4391              BICS     r1,r1,r2
000080  2233              MOVS     r2,#0x33
000082  0452              LSLS     r2,r2,#17
000084  1889              ADDS     r1,r1,r2
000086  63c1              STR      r1,[r0,#0x3c]
;;;28     	SYS->GPF_MFPL = SYS_GPF_MFPL_PF1MFP_ICE_CLK | SYS_GPF_MFPL_PF0MFP_ICE_DAT;
000088  4903              LDR      r1,|L3.152|
00008a  20ee              MOVS     r0,#0xee
00008c  39c0              SUBS     r1,r1,#0xc0
00008e  6188              STR      r0,[r1,#0x18]
000090  2000              MOVS     r0,#0
000092  6020              STR      r0,[r4,#0]
;;;29     
;;;30     	SYS_LockReg();
;;;31     }
000094  bdf8              POP      {r3-r7,pc}
;;;32     
                          ENDP

000096  0000              DCW      0x0000
                  |L3.152|
                          DCD      0x40000100
                  |L3.156|
                          DCD      0x40000200
                  |L3.160|
                          DCD      0x6743fe1c
                  |L3.164|
                          DCD      0x5e800002
                  |L3.168|
                          DCD      0x5f803d10

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                  UART0_Init PROC
;;;66     
;;;67     void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;68     {
;;;69     	//SYS_ResetModule(UART0_RST);
;;;70     	UART_Open(UART0, 115200);
000002  21e1              MOVS     r1,#0xe1
000004  0249              LSLS     r1,r1,#9
000006  4802              LDR      r0,|L4.16|
000008  f7fffffe          BL       UART_Open
;;;71     }
00000c  bd10              POP      {r4,pc}
;;;72     
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x40070000

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;72     
;;;73     int32_t main(void)
000000  f7fffffe          BL       SYS_Init
;;;74     {
;;;75     	SYS_Init();
;;;76     //GPIO_SetMode(PB, BIT0, GPIO_MODE_INPUT);
;;;77     	UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;78     	ADC_FunctionTest();
000008  f7fffffe          BL       ADC_FunctionTest
;;;79     
;;;80     	while(1);
;;;81     }
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  g_u32AdcIntFlag
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
