; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\adc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\adc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=536 --omf_browse=.\obj\adc.crf ..\..\..\Library\StdDriver\src\adc.c]
                          THUMB

                          AREA ||i.ADC_Close||, CODE, READONLY, ALIGN=1

                  ADC_Close PROC
;;;98       */
;;;99     void ADC_Close(ADC_T *adc)
000000  2001              MOVS     r0,#1
;;;100    {
;;;101        SYS->IPRST1 |= SYS_IPRST1_ADCRST_Msk;
000002  0780              LSLS     r0,r0,#30
000004  68c2              LDR      r2,[r0,#0xc]
000006  1081              ASRS     r1,r0,#2
000008  430a              ORRS     r2,r2,r1
00000a  60c2              STR      r2,[r0,#0xc]
;;;102        SYS->IPRST1 &= ~SYS_IPRST1_ADCRST_Msk;
00000c  68c2              LDR      r2,[r0,#0xc]
00000e  438a              BICS     r2,r2,r1
000010  60c2              STR      r2,[r0,#0xc]
;;;103        return;
;;;104    }
000012  4770              BX       lr
;;;105    
                          ENDP


                          AREA ||i.ADC_DisableHWTrigger||, CODE, READONLY, ALIGN=1

                  ADC_DisableHWTrigger PROC
;;;149      */
;;;150    void ADC_DisableHWTrigger(ADC_T *adc)
000000  3080              ADDS     r0,r0,#0x80
;;;151    {
;;;152        adc->ADCR &= ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk);
000002  6801              LDR      r1,[r0,#0]
000004  22ff              MOVS     r2,#0xff
000006  32f1              ADDS     r2,r2,#0xf1
000008  4391              BICS     r1,r1,r2
00000a  6001              STR      r1,[r0,#0]
;;;153        return;
;;;154    }
00000c  4770              BX       lr
;;;155    
                          ENDP


                          AREA ||i.ADC_DisableInt||, CODE, READONLY, ALIGN=1

                  ADC_DisableInt PROC
;;;189      */
;;;190    void ADC_DisableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;191    {
;;;192        if((u32Mask) & ADC_ADF_INT)
;;;193            adc->ADCR &= ~ADC_ADCR_ADIE_Msk;
000002  2202              MOVS     r2,#2
000004  3080              ADDS     r0,r0,#0x80
000006  2b00              CMP      r3,#0                 ;192
000008  d002              BEQ      |L3.16|
00000a  6803              LDR      r3,[r0,#0]
00000c  4393              BICS     r3,r3,r2
00000e  6003              STR      r3,[r0,#0]
                  |L3.16|
;;;194        if((u32Mask) & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L3.26|
;;;195            adc->ADCMPR[0] &= ~ADC_ADCMPR_CMPIE_Msk;
000014  6883              LDR      r3,[r0,#8]
000016  4393              BICS     r3,r3,r2
000018  6083              STR      r3,[r0,#8]
                  |L3.26|
;;;196        if((u32Mask) & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L3.36|
;;;197            adc->ADCMPR[1] &= ~ADC_ADCMPR_CMPIE_Msk;
00001e  68c1              LDR      r1,[r0,#0xc]
000020  4391              BICS     r1,r1,r2
000022  60c1              STR      r1,[r0,#0xc]
                  |L3.36|
;;;198    
;;;199        return;
;;;200    }
000024  4770              BX       lr
;;;201    
                          ENDP


                          AREA ||i.ADC_EnableHWTrigger||, CODE, READONLY, ALIGN=1

                  ADC_EnableHWTrigger PROC
;;;122      */
;;;123    void ADC_EnableHWTrigger(ADC_T *adc,
000000  b510              PUSH     {r4,lr}
;;;124                             uint32_t u32Source,
;;;125                             uint32_t u32Param)
;;;126    {
;;;127        if(u32Source == ADC_ADCR_TRGS_STADC)
;;;128        {
;;;129            adc->ADCR = (adc->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) |
000002  23ff              MOVS     r3,#0xff
000004  24ff              MOVS     r4,#0xff
000006  33f1              ADDS     r3,r3,#0xf1
000008  3401              ADDS     r4,#1
00000a  3080              ADDS     r0,r0,#0x80
00000c  2900              CMP      r1,#0                 ;127
00000e  d005              BEQ      |L4.28|
;;;130                        ((u32Source) | (u32Param) | ADC_ADCR_TRGEN_Msk);
;;;131        }
;;;132        else if(u32Source == ADC_ADCR_TRGS_TIMER)
;;;133        {
;;;134            adc->ADCR = (adc->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) |
;;;135                        ((u32Source) | ADC_ADCR_TRGEN_Msk);
;;;136        }
;;;137        else
;;;138        {
;;;139            adc->ADCR = (adc->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) |
000010  6802              LDR      r2,[r0,#0]
000012  439a              BICS     r2,r2,r3
000014  430a              ORRS     r2,r2,r1
000016  4322              ORRS     r2,r2,r4
000018  6002              STR      r2,[r0,#0]
;;;140                        ((u32Source) | ADC_ADCR_TRGEN_Msk);
;;;141        }
;;;142        return;
;;;143    }
00001a  bd10              POP      {r4,pc}
                  |L4.28|
00001c  6801              LDR      r1,[r0,#0]            ;129
00001e  4399              BICS     r1,r1,r3              ;129
000020  4311              ORRS     r1,r1,r2              ;129
000022  4321              ORRS     r1,r1,r4              ;129
000024  6001              STR      r1,[r0,#0]            ;129
000026  bd10              POP      {r4,pc}
;;;144    
                          ENDP


                          AREA ||i.ADC_EnableInt||, CODE, READONLY, ALIGN=1

                  ADC_EnableInt PROC
;;;166      */
;;;167    void ADC_EnableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;168    {
;;;169        if((u32Mask) & ADC_ADF_INT)
;;;170            adc->ADCR |= ADC_ADCR_ADIE_Msk;
000002  2202              MOVS     r2,#2
000004  3080              ADDS     r0,r0,#0x80
000006  2b00              CMP      r3,#0                 ;169
000008  d002              BEQ      |L5.16|
00000a  6803              LDR      r3,[r0,#0]
00000c  4313              ORRS     r3,r3,r2
00000e  6003              STR      r3,[r0,#0]
                  |L5.16|
;;;171        if((u32Mask) & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L5.26|
;;;172            adc->ADCMPR[0] |= ADC_ADCMPR_CMPIE_Msk;
000014  6883              LDR      r3,[r0,#8]
000016  4313              ORRS     r3,r3,r2
000018  6083              STR      r3,[r0,#8]
                  |L5.26|
;;;173        if((u32Mask) & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L5.36|
;;;174            adc->ADCMPR[1] |= ADC_ADCMPR_CMPIE_Msk;
00001e  68c1              LDR      r1,[r0,#0xc]
000020  4311              ORRS     r1,r1,r2
000022  60c1              STR      r1,[r0,#0xc]
                  |L5.36|
;;;175    
;;;176        return;
;;;177    }
000024  4770              BX       lr
;;;178    
                          ENDP


                          AREA ||i.ADC_Open||, CODE, READONLY, ALIGN=2

                  ADC_Open PROC
;;;46       */
;;;47     void ADC_Open(ADC_T *adc,
000000  b5f0              PUSH     {r4-r7,lr}
;;;48                   uint32_t u32InputMode,
;;;49                   uint32_t u32OpMode,
;;;50                   uint32_t u32ChMask)
;;;51     {
000002  4694              MOV      r12,r2
000004  460a              MOV      r2,r1
000006  469e              MOV      lr,r3
;;;52         uint32_t u32Delay = SystemCoreClock;    /* 1 second */
000008  491d              LDR      r1,|L6.128|
;;;53     
;;;54         g_ADC_i32ErrCode = 0;
00000a  2300              MOVS     r3,#0
00000c  4e1d              LDR      r6,|L6.132|
;;;55     
;;;56         /* Do calibration for ADC to decrease the effect of electrical random noise. */
;;;57         if ((adc->ADCALSTSR & ADC_ADCALSTSR_CALIF_Msk) == 0)
00000e  4604              MOV      r4,r0
000010  6809              LDR      r1,[r1,#0]            ;52  ; SystemCoreClock
000012  34ff              ADDS     r4,r4,#0xff
000014  3481              ADDS     r4,r4,#0x81
000016  6033              STR      r3,[r6,#0]  ; g_ADC_i32ErrCode
000018  6867              LDR      r7,[r4,#4]
00001a  460d              MOV      r5,r1                 ;52
00001c  07ff              LSLS     r7,r7,#31
00001e  3080              ADDS     r0,r0,#0x80
000020  2f00              CMP      r7,#0
000022  d120              BNE      |L6.102|
;;;58         {
;;;59             /* Must reset ADC before ADC calibration */
;;;60             adc->ADCR |= ADC_ADCR_RESET_Msk;
000024  6807              LDR      r7,[r0,#0]
000026  2301              MOVS     r3,#1
000028  031b              LSLS     r3,r3,#12
00002a  431f              ORRS     r7,r7,r3
00002c  6007              STR      r7,[r0,#0]
;;;61             while((adc->ADCR & ADC_ADCR_RESET_Msk) == ADC_ADCR_RESET_Msk)
;;;62             {
;;;63                 if (--u32Delay == 0)
;;;64                 {
;;;65                     g_ADC_i32ErrCode = ADC_TIMEOUT_ERR;
00002e  2300              MOVS     r3,#0
000030  43db              MVNS     r3,r3
000032  e001              B        |L6.56|
                  |L6.52|
000034  1e6d              SUBS     r5,r5,#1              ;61
000036  d00f              BEQ      |L6.88|
                  |L6.56|
000038  6807              LDR      r7,[r0,#0]            ;61
00003a  04ff              LSLS     r7,r7,#19             ;61
00003c  d4fa              BMI      |L6.52|
                  |L6.62|
;;;66                     break;
;;;67                 }
;;;68             }
;;;69     
;;;70             adc->ADCALSTSR |= ADC_ADCALSTSR_CALIF_Msk;  /* Clear Calibration Finish Interrupt Flag */
00003e  6867              LDR      r7,[r4,#4]
000040  2501              MOVS     r5,#1
000042  432f              ORRS     r7,r7,r5
000044  6067              STR      r7,[r4,#4]
;;;71             adc->ADCALR |= ADC_ADCALR_CALEN_Msk;        /* Enable Calibration function */
000046  6827              LDR      r7,[r4,#0]
000048  432f              ORRS     r7,r7,r5
00004a  6027              STR      r7,[r4,#0]
;;;72             ADC_START_CONV(adc);                        /* Start to calibration */
00004c  6805              LDR      r5,[r0,#0]
00004e  2701              MOVS     r7,#1
000050  02ff              LSLS     r7,r7,#11
000052  433d              ORRS     r5,r5,r7
000054  6005              STR      r5,[r0,#0]
;;;73             u32Delay = SystemCoreClock;
;;;74             while((adc->ADCALSTSR & ADC_ADCALSTSR_CALIF_Msk) != ADC_ADCALSTSR_CALIF_Msk)    /* Wait calibration finish */
000056  e003              B        |L6.96|
                  |L6.88|
000058  6033              STR      r3,[r6,#0]            ;66  ; g_ADC_i32ErrCode
00005a  e7f0              B        |L6.62|
                  |L6.92|
00005c  1e49              SUBS     r1,r1,#1              ;66
;;;75             {
;;;76                 if (--u32Delay == 0)
00005e  d00d              BEQ      |L6.124|
                  |L6.96|
000060  6865              LDR      r5,[r4,#4]            ;74
000062  07ed              LSLS     r5,r5,#31             ;74
000064  d0fa              BEQ      |L6.92|
                  |L6.102|
;;;77                 {
;;;78                     g_ADC_i32ErrCode = ADC_TIMEOUT_ERR;
;;;79                     break;
;;;80                 }
;;;81             }
;;;82     
;;;83         }
;;;84     
;;;85         adc->ADCR = (adc->ADCR & (~(ADC_ADCR_DIFFEN_Msk | ADC_ADCR_ADMD_Msk))) | \
000066  6801              LDR      r1,[r0,#0]
000068  4b07              LDR      r3,|L6.136|
00006a  4019              ANDS     r1,r1,r3
00006c  4311              ORRS     r1,r1,r2
00006e  4662              MOV      r2,r12
000070  4311              ORRS     r1,r1,r2
000072  6001              STR      r1,[r0,#0]
;;;86                     (u32InputMode) | \
;;;87                     (u32OpMode);
;;;88     
;;;89         adc->ADCHER = (adc->ADCHER & ~ADC_ADCHER_CHEN_Msk) | (u32ChMask);
000074  6841              LDR      r1,[r0,#4]
000076  4671              MOV      r1,lr
000078  6041              STR      r1,[r0,#4]
;;;90     
;;;91         return;
;;;92     }
00007a  bdf0              POP      {r4-r7,pc}
                  |L6.124|
00007c  6033              STR      r3,[r6,#0]            ;79  ; g_ADC_i32ErrCode
00007e  e7f2              B        |L6.102|
;;;93     
                          ENDP

                  |L6.128|
                          DCD      SystemCoreClock
                  |L6.132|
                          DCD      ||.data||
                  |L6.136|
                          DCD      0xfffffbf3

                          AREA ||i.ADC_SetExtendSampleTime||, CODE, READONLY, ALIGN=1

                  ADC_SetExtendSampleTime PROC
;;;210      */
;;;211    void ADC_SetExtendSampleTime(ADC_T *adc, uint32_t u32ModuleNum, uint32_t u32ExtendSampleTime)
000000  3080              ADDS     r0,r0,#0x80
;;;212    {
;;;213        adc->ESMPCTL = (adc->ESMPCTL & ~ADC_ESMPCTL_EXTSMPT_Msk) |
000002  6a01              LDR      r1,[r0,#0x20]
000004  0a09              LSRS     r1,r1,#8
000006  0209              LSLS     r1,r1,#8
000008  4311              ORRS     r1,r1,r2
00000a  6201              STR      r1,[r0,#0x20]
;;;214                       (u32ExtendSampleTime << ADC_ESMPCTL_EXTSMPT_Pos);
;;;215    }
00000c  4770              BX       lr
;;;216    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  g_ADC_i32ErrCode
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_27253afc____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_adc_c_27253afc____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_27253afc____REVSH|
#line 402
|__asm___5_adc_c_27253afc____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
